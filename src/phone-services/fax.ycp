/**
 * File:	include/phone-services/fax.ycp
 * Package:	Communication
 * Summary:     Fax machine dialogs
 * Authors:	Karsten Keil <kkeil@suse.de>
 *
 * $Id$
 *
 * 
 */

{

textdomain "phone-services";

import "Fax";
import "Wizard";

include "ui/common_messages.ycp";
include "ui/common_popups.ycp";

/**
 * Main Fax machine dialog
 * @param standalone true if not run from another ycp client
 * @return dialog result
 */
global define symbol FaxMainDialog() ``{

    /* dialog caption */
    string caption = _("Fax machine configuration");

    /* some variables */

    term theader = `header(
	/* Table header 1/5 */
	_("User"),
	/* Table header 2/5 */
	_("Faxnumbers"),
	/* Table header 3/5 */
	_("StationID"),
	/* Table header 4/5 */
	_("Headline"),
	/* Table header 5/5 */
	_("Action")
    );

    /* Fax dialog general help 1/2 */
    string help = _("<p>The fax system for one or more users can be
set up in this dialog. Each user must have at least one own unique fax
number configured. Please refer to the telecommunication chapter in the
manuals for further details.</p>") +

    /* Fax dialog general help 2/2 */
_("<p>When adding or editing a user, a dialog will be shown with
the following fields:</p>") +

    /* Fax dialog help for options 1/5 */
_("<p><b>User</b>: The system user who wants to receive or send fax 
calls.</p>") +

    /* Fax dialog help for options 2/5 */
_("<p><b>Faxnumbers</b>: One or more fax numbers (delimited by
commas) which belong (only!) to this user. The first number 
is used as own number when sending faxes.</p>") +

    /* Fax dialog help for options 3/5 */
_("<p><b>StationID</b>: The fax station ID used by the fax protocol.
Normally set to the external number in international format, e.g.
<tt>+49 89 123456</tt>.</p>") +

    /* Fax dialog help for options 4/5 */
_("<p><b>Headline</b>: The headline used for sending faxes - normally
a string containing some department or personal name.</p>") +

    /* Fax dialog help for options 5/5 */
_("<p><b>Action</b>: By default, received faxes will be sent to the user
as mail and saved to disk. This is named <tt>MailAndSave</tt>. To
disable the mails, set this to <tt>SaveOnly</tt>.</p>");

    integer max = 0;
    integer items = 0;
    list table_items = [];
    map userconf = Fax::aconfig;

    /* make ui items from config map */
    term item = nil;
    foreach(`k, `m, userconf, ``{
	item = `item(`id(k),
	    k,
	    m["fax_numbers"]:"",
	    m["fax_stationID"]:"",
	    m["fax_headline"]:"",
	    m["fax_action"]:"");
	change(table_items, item);
	items = items + 1;
    });

    y2debug("table_items=%1", table_items);
    y2debug("items=%1", items);
    y2debug("userconf=%1", userconf);
    max = items;

    list devs = Fax::GetDevices();
    y2debug("devs=%1", devs);

    /* main dialog contents */
    term contents = `HBox(
	`HSpacing(5),
	`VBox(
	    `VStretch(),
	    `VSpacing(1),
	    `Frame(_("&User table"), `VBox(
		`Table(`id(`table), theader, []),
		/* PushButton label */
		`HBox(`PushButton(`id(`add), _("Ad&d")),
		/* PushButton label */
		`PushButton(`id(`edit), `opt(`disabled), _("&Edit")),
		/* PushButton label */
		`PushButton(`id(`delete), `opt(`disabled), _("De&lete"))))),
	    `VSpacing(1),
	    `VStretch()
	),
	`HSpacing(5)
    );

    Wizard::SetContentsButtons(caption, contents, help,
	BackButtonLabel(), FinishButtonLabel());

    UI::ChangeWidget(`id(`table), `Items, table_items);
    UI::SetFocus(`id(`table));

    any ret = nil;
    while(true) {
	boolean new_table = false;
	map cur_item = $[];

	UI::ChangeWidget(`id(`edit), `Enabled, (items > 0));
	UI::ChangeWidget(`id(`delete), `Enabled, (items > 0));

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    /* TODO: handle the changed dialog values */
	    if(UI::ReallyAbortPopup(Fax::modified)) break;
	    else continue;
	}
	/* edit user settings */
	else if(ret == `edit) {
	    string cur = UI::QueryWidget(`id(`table), `CurrentItem);

	    y2debug("cur=%1", cur);

	    cur_item = Fax_UserEditDialog(cur, userconf);
	    y2debug("cur_item=%1", cur_item);
	    if(cur_item == nil)
		continue;
	    else {
		cur = cur_item["ID"]:"";
		if (cur == "")
		    continue;
		cur_item = filter(`k, `v, cur_item, ``(k != "ID"));
		new_table = true;
		userconf = add(userconf, cur, cur_item);
		y2debug("userconf=%1", userconf);
	    }
	}
	/* add user */
	else if(ret == `add) {
	    cur_item = Fax_UserEditDialog("", userconf);
	    if(cur_item == nil)
		continue;
	    else {
		string cur = cur_item["ID"]:"";
		if (cur == "")
		    continue;
		cur_item = filter(`k, `v, cur_item, ``(k != "ID"));
		new_table = true;
		userconf = add(userconf, cur, cur_item);
	    }
	}
	/* delete user */
	else if(ret == `delete) {
	    items = items - 1;
	    string cur = UI::QueryWidget(`id(`table), `CurrentItem);
	    table_items = filter(`e, table_items, ``(cur != select(select(e, 0, []), 0, "")));
	    userconf = filter(`k, `v, userconf, ``(k != cur));
	    new_table = true;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    break;
	}
	else {
	    y2debug("Unexpected retcode: %1", ret);
	    continue;
	}
	if (new_table) {
	    items = 0;
	    table_items = [];
	    foreach(`k, `m, userconf, ``{
		item = `item(`id(k),
		    k,
		    m["fax_numbers"]:"",
		    m["fax_stationID"]:"",
		    m["fax_headline"]:"",
		    m["fax_action"]:"");
		change(table_items, item);
		items = items + 1;
	    });
	    max = items;
	    UI::ChangeWidget(`id(`table), `Items, table_items);
	    UI::ChangeWidget(`id(`table), `CurrentItem, max);
	    Fax::modified = true;
	}
    };

    /* update settings from widgets */
    if(ret == `next) {
	if (Fax::aconfig != userconf) {
	    Fax::aconfig = userconf;
	    Fax::modified = true;
	}
    }
    return ret;
}

/**
 * Fax user edit dialog
 * @param uname name of the edited user settings
 * @param uconf map of all userentries
 * @return user settings or nil, if canceled
 */
global define map Fax_UserEditDialog(string uname, map uconf) ``{

    map uc = uconf[uname]:$[];

    if (uc == $[]) {
	/* set globals as defaults */
	uc["fax_stationID"] = Fax::gconfig["fax_stationID"]:"";
	uc["fax_headline"] = Fax::gconfig["fax_headline"]:"";
	uc["fax_action"] = Fax::gconfig["fax_action"]:"MailAndSave";
    }
    /* add at least the user */
    if (uname != "" && !contains(Fax::users, uname)) {
	Fax::users = add(Fax::users, uname);
	Fax::users = sort(Fax::users);
    }

    y2debug("uc=%1", uc);
    list actions = [ "MailAndSave", "SaveOnly" ];

    UI::OpenDialog(`opt(`decorated),`VBox(
	`HSpacing(1),
	`VBox(
	    /* ComboBox label */
	    `ComboBox(`id(`user), `opt(`editable, `hstretch), _("&User"), Fax::users),
	    /* TextEntry label */
	    `TextEntry(`id(`phone), _("&Faxnumbers"), uc["fax_numbers"]:""),
	    /* TextEntry label */
	    `TextEntry(`id(`station), _("&StationID"), uc["fax_stationID"]:""),
	    /* TextEntry label */
	    `TextEntry(`id(`headline), _("&Headline"), uc["fax_headline"]:""),
	    /* ComboBox label */
	    `ComboBox(`id(`action), `opt(`hstretch), _("&Action"), actions)
	),
	`HSpacing(1),
	`HBox(
	    `PushButton(`id(`ok), `opt(`default), OKButtonLabel()),
	    `PushButton(`id(`cancel), CancelButtonLabel())
	)
    ));

    if(uname != "")
	UI::ChangeWidget(`id(`user), `Value, uname);
    UI::ChangeWidget(`id(`phone), `ValidChars, "0123456789#*,");
    UI::ChangeWidget(`id(`station), `ValidChars, "0123456789+ ");
    UI::ChangeWidget(`id(`action), `Value, uc["fax_action"]:"MailAndSave");
    UI::SetFocus(`id(`user));

    any ret = nil;
    string user = "";
    string sval = "";

    while(true) {
	ret = UI::UserInput();
	if(ret != `ok) break;

	user = UI::QueryWidget(`id(`user), `Value);
	if ((user == nil) || (user == "")) {
	    /* ErrorPopup text */
	    UI::ErrorPopup(_("User must be set"));
	    UI::SetFocus(`id(`user));
	    continue;
	}
	uc = add(uc, "ID", user);

	sval = UI::QueryWidget(`id(`phone), `Value);
	/* fax_numbers "" is OK, all calls acepted */

	uc = add(uc, "fax_numbers", sval);

	sval = UI::QueryWidget(`id(`station), `Value);
	if(sval == "") {
	    /* ErrorPopup text */
	    UI::ErrorPopup(_("StationID is incorrect"));
	    UI::SetFocus(`id(`station));
	    continue;
	} else if(20 < size(sval)) {
	    /* ErrorPopup text */
	    UI::ErrorPopup(_("StationID maximum length is 20"));
	    UI::SetFocus(`id(`station));
	    continue;
	}
	uc = add(uc, "fax_stationID", sval);

	sval = UI::QueryWidget(`id(`headline), `Value);
	/* fax_headline "" is OK, default value  */
	if(50 < size(sval)) {
	    /* ErrorPopup text */
	    UI::ErrorPopup(_("Headline maximum length is 50"));
	    UI::SetFocus(`id(`headline));
	    continue;
	}
	uc = add(uc, "fax_headline", sval);
	
	sval = UI::QueryWidget(`id(`action), `Value);
	if(sval == nil || sval == "") {
	    /* ErrorPopup text */
	    UI::ErrorPopup(_("Action is incorrect"));
	    UI::SetFocus(`id(`action));
	    continue;
	}
	uc = add(uc, "fax_action", sval);

	break;
    }
    y2debug("ret=%1", ret);
    UI::CloseDialog();
    if(ret != `ok) return nil;
    return uc;
}

/* EOF */
}

/**
 * File:	modules/Answering_machine.ycp
 * Package:	phone-services
 * Summary:     Configuration of a phone answering machine
 * Authors:	Karsten Keil <kkeil@suse.de>
 *
 * $Id$
 */

{

module "Answering_machine";
textdomain "phone-services";

import "Users";
import "UsersCache";

/**
 * All Answering machine configured user data
 */
global map aconfig = $[];

/**
 * All Answering machine global settings
 */
global map gconfig = $[];

/**
 * Data was modified?
 */
global boolean modified = false;

/**
 * List of available users
 */
global list users = [];

/**
 * All configurations read at the start
 */
map aconfig_init = $[];
map gconfig_init = $[];

/**
 * config file location
 */
string conf_file = "/etc/capisuite/answering_machine.conf";

/**
 * needed packages
 */

list need_pkgs = [ "capisuite" ];

/**
 * Read config settings
 * @return true if success
 */
global define boolean Read() ``{

    /* read config */
    path cf  = add(.phone-services.section, conf_file);
    if(SCR::Read(.target.size, conf_file) > 0) {
	aconfig = listmap(string s, SCR::Dir(cf), ``{
	    path pp = add(add(.phone-services.v, conf_file), s);
	    return $[ s : listmap(string vs, SCR::Dir(pp), ``{
		return $[ vs : SCR::Read(add(pp, vs)) ];
	    }) ];
	});
    }
    y2debug("aconfig=%1", aconfig);

    users = [];

    aconfig = filter(string k, map v, aconfig, ``{
	if (k == "GLOBAL") {
	    gconfig = v;
	    return(false);
	} else {
	    users = add(users, k);
	    return(true);
	}
    });

    y2debug("aconfig=%1", aconfig);
    y2debug("gconfig=%1", gconfig);

    /* save values to check for changes later */
    gconfig_init = gconfig;
    aconfig_init = aconfig;

    /* readin Userdatabase */

    Users::Read (``{ return false;}, false);
    Users::ReadNewSet ("nis");
    y2debug("UsersCache::usernamelists  %1", UsersCache::usernamelists);  

    foreach ( `key, `l,  UsersCache::usernamelists, ``{
	if (key != "system") {
	    foreach (`uname, l, ``{
		if (!contains(users, uname))
			users = add(users, uname);
	    });
	}
    });

    y2debug("users=%1", users);
    users = sort(users);
    y2debug("users=%1", users);

    return true;
}

/**
 * Write answering_machine settings and apply changes
 * @return true if success
 */
global define boolean Write() ``{

    if(!modified) return true;
    y2milestone("Writing configuration");

    /* Check if there is anything to do */
    if((aconfig_init == aconfig) && (gconfig_init == gconfig)) {
	y2debug("config not modified");
	return true;
    }

    /* check for installed packages */
    include "network/routines.ycp";
    symbol retp = Packages(need_pkgs);

    /* build a list of deleted entries */
    list deleted = [];
    foreach(`u, `m, aconfig_init, ``{
    	if (aconfig[u]:$[] == $[])
	    deleted = add(deleted, u);
    });
    y2debug("deleted %1", deleted);

    /* create if not exists, otherwise backup */
    if(SCR::Read(.target.size, conf_file) < 0)
	SCR::Write(.target.string, conf_file, "");
    else
	SCR::Execute(.target.bash, "/bin/cp "+conf_file+" "+conf_file+".YaST2save");

    any ret = false;

    /* update the global config */
    path cf = add(.phone-services.v, conf_file);
    path cfs = add(cf, "GLOBAL");

    foreach(`k, `v, gconfig, ``{
	path p = add(cfs, k);
	ret = SCR::Write(p, v);
    });

    /* remove deleted user sections */
    if (deleted != []) {
	cf = add(.phone-services.section, conf_file);
	foreach (`d, deleted, ``{
	    cfs = add(cf, d);
	    ret = SCR::Write(cfs, nil);
	});
    }

    /* update the users config */
    cf = add(.phone-services.v, conf_file);
    foreach(`s, `m, aconfig, ``{
	cfs = add(cf, s);
	foreach(`k, `v, m, ``{
	    path p = add(cfs, k);
	    ret = SCR::Write(p, v);
	});
    });
    
    y2debug("write %1 ret %2",cfs, ret);

    /* flush it on disc */
    SCR::Write(.phone-services, nil);

    modified = false;
    if (ret == true) {
	/* start capisuite */
	if (SCR::Read(.target.size, "/etc/init.d/capisuite") > 0)
	{
		SCR::Execute(.target.bash, "/sbin/insserv -d capisuite");
		SCR::Execute(.target.bash, "/etc/init.d/capisuite start");
	}
    }
    return ret == true;
}

/* EOF */
}
